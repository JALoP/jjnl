This README will detail the creation of the keystore files (.jks) in the
jnl_test/certs directory. All commands are run from that directory.

1) Construct a key store that will hold the private key material and public
certificate:

$> keytool -genkeypair -keyalg rsa -keystore server.jks -storepass changeit
   -alias server -ext san=dns:<domain-name>,ip:<ip-address>

Where the following are true:
'changeit' is the desired password for the keystore
'server' is the desired alias for the subscriber's keypair

Either domain-name or ip-address should be filled in. Use whichever one that
the publisher will use when connecting to this subscriber

<domain-name> is the domain name of the server. For example, test-server.com.
A domain-name only SAN would look like: san=dns:<domain-name>

<ip-address> is the IP address of the server. For example, 127.0.0.1.
An IP address only SAN would look like: san=ip:<ip-address>

You will also be prompted to answer a number of questions (name,
organization, etc).

To extract the server's public certificate, you can do:

$> keytool -exportcert -rfc -keystore server.jks > server.pem

You will be prompted for the keystore password set when creating the keystore.

The server.pem file is suitable for use in applications that use OpenSSL (such
as the C JALoP Network Library).

2) Import the publisher's public certificate into the keystore. This
step is only necessary if you intend to enable TLS.

$> keytool -importcert -keystore server.jks -file /path/to/publisher-cert.pem
   -alias publisher

Where 'publisher' is the alias you wish to assign to this certificate.

You will be prompted for the keystore password set when creating the keystore.

If you wish to use a trust store, replace the server's keystore 'server.jks'
with the name of the trust store.

The resulting keystore contains a keypair for the server and, optionally, the
public certificate for the client.

Note that if a keystore is being created on Java 11 > 11.0.12 and is expected to be
used to Java 8 < 8.0.301, use -J-Dkeystore.pkcs12.legacy when the keystore is created.

--------- OLD INSTRUCTIONS BELOW ---------

1) Construct a key store that will hold the private key material and public
certificate:

$> keytool -genkeypair -keyalg rsa -keystore server.jks

assuming the server.jks file does not already exist, this will first create a
new keystore and prompt you to enter a password (and re-enter the password) to
protect the keystore.
After that, it will prompt you to answer a number of questions (name,
organization, etc), and finally prompt you for a password for the private key.
You should leave the private key passphrase blank (i.e. same as the passphrase
for the keystore). This is a limitation of the beepcore library.

To extract the public certificate, you can do:

$> keytool -exportcert -rfc -keystore server.jks > server.pem

The server.pem file is suitable for use in applications that use OpenSSL (such
as the C JALoP Network Library).

2) Construct the trust store that will contain the public certificates of
   authorized remotes.

$> keytool -importcert -keystore remotes.jks -file remote.pem

Where 'remote.pem' is the path to a file that contains the certificate from a
remote. The keytool program will dump information about the certificate to the
screen, and prompt for action. You should double check that this is the
certificate you intended to import. If you answer 'no', then the keytool
program will not add the certificate to the truststore. If you answer 'yes',
then the keytool program will add the certificate to the trust store.

When adding multiple certificates to the trust store an alias must be assigned
to the additional certificates.

$> keytool -importcert -keystore remotes.jks -file remote.pem -alias remoteCert

The default alias is "mykey". This will be used if an alias is not specified
but then subsequent attempts to add a certificate without an alias will be
denied.

You can see what certificates are currently in the trust store and their
aliases with:

$> keytool -list -v -keystore remotes.jks -storepass changeit

Where 'changeit' is the password for the keystore specified.

3) Now that you have a keystore containing the private key material and
certificate for your JALoP Network Store (i.e. the server.jks file) and a
truststore that contains the public certificate for a remote (i.e. the
remotes.jks file), the only thing left to do is propagate this information
down to the JSSE library for use.

To do this, you must create a org.beepcore.beep.profile.ProfileConfiguration
object, and set the following keys:

"Key Algorithm"        - In most cases, this should be "SunX509". If left empty,
                         the remainder of the configuration keys are ignored,
                         and default providers are used (which is probably not
                         what you want). See SSLContext.init() for more
                         information. Omitting the "Key Algorithm" parameter is
                         akin to passing null for the KeyManager array.
"Key Provider"         - When configuring the underlying classes, "Key
                         Algorithm" and "Key Provider" are passed into the
                         KeyManagerFactory.getInstance() method. See the
                         documentation of KeyManagerFactory for more details.
"Key Store Format"     - The default is "JKS" (which is the type of
                         keystore that keytool creates by default) and should
                         only be modified if you know what you are doing.
"Key Store Provider"   - "Key Store Format" and "Key Store Provider"
                         are passed directly to the KeyStore.getInstance() method.
                         See the documentation of KeyStore for more information.
"Key Store Passphrase" - This is the password for the keystore created in step 1.
"Key Store Data Type"  - Must be set to the string "file"
"Key Store"            - The path to the keystore containing the private key
                         material and certificate (i.e. the keystore created in
                         step 1)
"Trust Algorithm"        - In most cases, this should be "SunX509". If left
                         empty the remainder of the configuration keys are
                         ignored, and default providers are used (which is
                         probably not what you want). See SSLContext.init() for
                         more information. Omitting the "Trust Algorithm"
                         paramter is akin to passing null for the TrustManager
                         array.
"Trust Provider"         - "Trust Algorithm" and "Trust Provider" are
                         passed into the KeyManagerFactory.getInstance() method.
                         See the documentation of KeyManagerFactory for more
                         details.
"Trust Store Format"     - The default is "JKS" (which is the type of
                         keystore that keytool creates by default) and should
                         only be modified if you know what you are doing.
"Trust Store Provider"   - "Trust Store Format" and "Trust Store Provider"
                         are passed directly to the KeyStore.getInstance() method.
                         See the documentation of KeyStore for more information.
"Trust Store Passphrase" - This is the password for the truststore created in step 2.
"Trust Store Data Type"  - Must be set to the string "file"
"Trust Store"            - The path to the truststore containing the public
                         certificates of trusted machines (i.e. the truststore
                         created in step 2)

Although it is possible to use the system wide (default) settings for the SSL configuration, it is not recommended unless you have access to the system wide key and trust stores (and keep them updated).

